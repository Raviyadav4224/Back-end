1. What are Micro-Services -

    * Microservices are a way of designing an application as a collection of small, independent services 
      that each handle one specific task or feature

    * These services work together to build the complete system, but each one can be developed, deployed, 
      and maintained separately.

    * This makes the system easier to manage, scale, and update without affecting the entire application.

2. How it is implemented using Springboot -

    1. You set up Eureka Server, which acts as the discovery server.

    2. Each microservice acts as a Eureka Client, registers itself with Eureka Server at startup.

    3. When one microservice wants to communicate with another, it uses Feign Client.

        Feign automatically looks up the service from Eureka using the name specified.

        It builds the request to the correct instance without you needing to specify its IP or port.

3. Key Components of Microservices - 

    1. Service Discovery - Helps Microservices to find each other ( example using Eureka Server )
    2. API Gateway - Entry point for all Client Requests ( example Spring Cloud Gateway )
    3. Configuration Server - Central point to manage all Configuration ( example Spring Cloud config)
    4. Inter Service Communication - Services talk using RestTemplate  ( example using Feign Client )
    5. Load Balancing - Evenly distributes the Requests
    6. Resillence - Circuit Breakers, retires and timeout
    8. Security - JWTs and centralized authentication
    7. Monitoring - Health Check using Actuator  
    9. Logging - centralized log management

4. Interaction between one microservice and another microservice -

    | Type         | Example                    | Description                                             |
    | ------------ | -------------------------- | ------------------------------------------------------- |
    | Synchronous  | Feign Client, RestTemplate | Real-time communication; waits for a response.          |
    | Asynchronous | Kafka, RabbitMQ            | Decoupled communication; doesnâ€™t wait. Used for events. |

    * Communication using RestTemplate -

        private RestTemplate restTemp= new RestTemplate();
        restTemp.getForObject("http://localhost:8082/inventory?id=" + id, String.class)
        
5. API Gateway -

    API Gateway acts as a single entry point for all client requests in a microservices architecture.
    Handles routing, authentication, rate limiting, logging, and load balancing.
    In Spring ecosystem, we use Spring Cloud Gateway 
    Nginx is used as an API Gateway and it also acts as Reverse Proxy

6. Design Patterns -