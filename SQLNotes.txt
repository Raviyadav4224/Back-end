1. SQL ->

    Structured Query Language (SQL) is a programming language used to manage and manipulate 
    relational databases

2. MYSQL ->

    It is an RDBMS which uses SQL for database operations

3. DBMS ->

    It is a software to manage databases

4. RDBMS ->

    It is a type of DBMS which stores data in the form of Tables (rows and columns) and maintains 
    relationship between them

5. SQL Commands ->

    SQL commands are categorized into 5 categories -

        DDL (Data Definition Language) -

            CREATE, DROP, ALTER, TRUNCATE

        DQL (Data Query Language) -

            SELECT

        DML (Data Manipulation Language) -

            INSERT, DELETE , UPDATE

        DCL (Data Control Language) -

            GRANT, REVOKE

        TCL (Transaction Control Language) -

            BEGIN TRANSACTION, COMMIT, ROLLBACK

6. Data Types in SQL ->

    Numeric -

        INT / INTEGER	Stores whole numbers (e.g., 10, 500)
        TINYINT	1-byte integer (0 to 255 or -128 to 127)
        SMALLINT	2-byte integer (-32,768 to 32,767)
        MEDIUMINT	3-byte integer (-8M to 8M)
        BIGINT	8-byte integer (Very large numbers)
        DECIMAL(p, s) / NUMERIC(p, s)	Fixed-point precision numbers
        FLOAT	4-byte floating-point number
        DOUBLE / REAL	8-byte floating-point number

    String -

        CHAR(n)	Fixed-length string (e.g., CHAR(10) stores exactly 10 characters)
        VARCHAR(n)	Variable-length string (e.g., VARCHAR(50) stores up to 50 characters)
        TEXT	Large text (up to 64KB in MySQL)
        TINYTEXT	Small text (up to 255 characters)
        MEDIUMTEXT	Medium-sized text (up to 16MB)
        LONGTEXT	Large text (up to 4GB)

    Date and Time -

        DATE	Stores date in YYYY-MM-DD format
        TIME	Stores time in HH:MM:SS format
        DATETIME	Stores both date and time (YYYY-MM-DD HH:MM:SS)
        TIMESTAMP	Stores Unix timestamp (auto-updated)
        YEAR	Stores year values (YYYY)

    Boolean -

        BOOLEAN / BOOL	Stores TRUE or FALSE (internally stored as TINYINT(1), where 0 = FALSE 
        and 1 = TRUE)

    JSON and Other types -

        JSON	Stores JSON formatted data
        BLOB	Binary Large Object (used for images, files, etc.)
        ENUM	Stores predefined string values (e.g., ENUM('Small', 'Medium', 'Large'))
        SET	    Stores multiple predefined values
    
7. Using SQL Commands ->

    Data Definition Language (DDL) -
        CREATE -

        * CREATE table Employees (
            id INT PRIMARY KEY auto_increment,
            name VARCHAR(50) not null,
            salary DECIMAL(10,2) default 0.0,
            age INT Check(age>18)
            );
            
        ALTER -

            * ALTER TABLE TABLE_NAME ADD COLUMN (
                    COLUMN_NAME COLUMN_DATA_TYPE
                )
                example -
                        ALTER table employees add column(
                        dob Date,
                        createdAt TIMESTAMP
                        );
            

            * ALTER TABLE TABLE_NAME MODIFY COLUMN OLD_COLUMN_NAME TO NEW_COLUMN_NAME
                example - ALTER table employees modify column createdAt TIMESTAMP default current_timestamp;

            * ALTER TABLE TABLE_NAME RENAME COLUMN OLD_COLUMN_NAME TO NEW_COLUMN_NAME
                example - ALTER table employees rename column name to emp_name;

        DROP -

            DROP TABLE TABLE_NAME;
            DROP DATABASE DATABASE_NAME;
        
        TRUNCATE -

            TRUNCATE TABLE TABLE_NAME;

        DROP vs TRUNCATE -

            Drop is used to delete a table or database whereas Truncate only deletes the data keeping 
            the structure or schema as it is ;    
            Using Truncate , rollback is possible if used inside a TRANSACTION (is supported by DBMS, MYSql
            doesn't supports this)

            example -
                START TRANSACTION 
                Truncate table Employees
                ROLLBACK

    Data Manipulation Language (DML) -
        
        INSERT -
        
            INSERT INTO TABLE_NAME (COLUMN_NAMES) VALUES (VALUE1,VALUE2)

            example -
                insert into employees (emp_name,salary,age,dob) 
                values
                    ("Minu",95000.99,27,'1998-10-02'),
                        ("Minu Kumari",95000.99,27,'1998-10-02');
        
        UPDATE -
        
            UPDATE TABLE_NAME SET VALUES_TO_CHANGE WHERE CONDITION

            example -
                update employees set emp_name='Minakshi Kumari' where id=4; 

        DELETE -

            DELETE FROM TABLE_NAME WHERE CONDITION

            example -
                Delete from Employees where id=1;

    Data Query Language (DQL) -

        SELECT -

            SELECT COLUMN_NAMES FROM TABLE_NAME

            example - 
                select * from Employees ;
                select emp_id,name from Employees;

    *Data Control Language (DCL) -

        Used to manage permission and access control

        CREATE USER -

            CREATE USER 'USER_NAME@HOST' IDENTIFIED BY 'PASSWORD'

                example -
                    create 'ravi'@'localhost' identified by '1234';
                    create 'ravi@%' identified by '1234'; --> % means user can connect the DB from any host

        GRANT -

            GRANT PREVILEGE_NAME ON DATABASE_TABLES TO 'USER_NAME@HOST'

                example -
                    GRANT ALL PRIVILEGES ON sqlLearning.* TO 'user'@'localhost';
                    GRANT SELECT ON sqlLearning.* TO 'username'@'localhost';

        REVOKE -

            REVOKE ALL PRIVILEGES,GRANT OPTION FROM 'USER_NAME@HOST';
            REVOKE PREVILEGE_NAME ON DATABASE_TABLES TO 'USER_NAME@HOST'

                example -
                    REVOKE ALL PRIVILEGES,GRANT OPTION FROM 'user'@'localhost';
                    REVOKE SELECT ON sqlLearning.* FROM 'username'@'localhost';

        * User related details are stored inside mysql.user table
            Select * from  mysql.user;

        * Show grants for 'USER_NAME@HOST' - lists all the previleges to the specified user
            
            By default 
            GRANT USAGE ON *.* TO 'ravi'@'localhost';
            This means:
            Give no real privileges, just allow the user ravi@localhost to exist and connect to the MySQL server.
        
    *Transactional Control Language (TCL) -

        Used to manage transactions in a database

        COMMIT - 

            Saves the transaction permanently

        ROLLBACK -

            Undoes the changes since the last commit

        SAVEPOINT - 

            Creates a checkpoint within transaction

            example -
                START TRANSACTION;
                UPDATE employees set salary=100 where emp_name='Ravi';
                SAVEPOINT salaryUdpated;
                DELETE FROM employees where salary=100;
                SAVEPOINT deleteSalaryEmp;
                ROLLBACK TO salaryUdpated;
                COMMIT;
    
8. SQL Clauses -

    Basic clauses includes WHERE, HAVING, ORDER BY, GROUP BY, LIMIT

        Order By - Used for sorting data in ASC or DESC format 
            Select * from Employees order by age DESC
            * Select * from Employees order by id,name -> sorts by id first and if same id then by name alphabetically
            * Select * from Employees order by id desc,name desc-> sorts by id in desc first and if same id then by name desc order

        Group By - groups same values in a specified column
            select age,AVG(salary) from employees group by age;

        Having - Used to filter the data after grouping
             select age,AVG(salary) from employees group by age having age>10;
        
        * WHERE is used before grouping (filters rows).
          HAVING is used after grouping (filters groups).
        
        Limit - Used to limit the results
            Select * from Employees order by age DESC LIMIT 5
        
        OFFSET - Used to skip number of records
            select * from Emp order by salary desc limit 1 offset 2 -- selects 3rd highest salary since offset 2 skips 1st 2 records 

9. Aggregate Functions -

    COUNT(expression) - 
        Used to calculate No. of rows or Non-NULL values in a table
        ** COUNT() only counts non-null values
        ** To Count conditionally we can use -
            count( case when rating >3 then 1 else NULL)
            count( case when rating >3 then 1 else 0) - this will count all values since 0 is not null
        
    SUM(expression) -
        Used to calculate SUM of a Column 
        It ignores Null values

    AVG(expression) -
        Used to calculate SUM of a Column 
        It ignores Null values
    
    MAX & MIN -
        MAX() returns the highest value in a column.
        MIN() returns the lowest value in a column.
    
    COALESCE(value1,value2,...) -
        It is used to return first NON-NULL value from a list of expressions, if all values are NULL 
        it returns NULL
        It is used to handle Null values by replacing with default value

        examples -
            select count(coalesce(salary,0)) from employees;
            select count(*) from employees;
            select sum(salary) from employees;
            select avg(coalesce(salary,0)) from employees;
    
    REPLACE(string, from_string, new_string) -
        Replaces a given string from main string
        example -
            SELECT REPLACE("XYZ FGH XYZ", "X", "M");

    Like -

        Used for pattern matching

        examples -
                %	Matches zero or more characters	'Jo%' matches 'John', 'Joseph', 'Jordan'
                _	Matches exactly one character	'J_n' matches 'Jon', 'Jen', but not 'John'
                [charlist]	Matches any single character from the set (only in some MySQL versions)	'J[oa]n' matches 'Jon' or 'Jan'

        SELECT * FROM employees WHERE name Like '%A';

    RegExp -

        Used for pattern matching in SQL
        examples -
            .	Matches any single character	'J.n' matches 'Jan', 'Jon'
            ^	Matches the beginning of a string	'^A' matches 'Alice', 'Andrew'
            $	Matches the end of a string	'son$' matches 'Johnson', 'Jackson'
            *	Matches zero or more occurrences of the previous character	'A*' matches 'A', 'AA', 'AAA'
            +	Matches one or more occurrences of the previous character	'o+' matches 'oo', 'ooo', but not 'o'
            `	`	OR (alternation)
            [abc]	Matches any single character in brackets	'[JH]ohn' matches 'John', 'Hohn'
            [a-z]	Matches any character in a range	'[A-F]%' matches names starting with A–F
            [^abc]	Negates a character class (matches anything except listed characters)	'[^A-C]%' excludes names starting with A–C

            SELECT * FROM employees WHERE name REGEXP '^J';

10. Data Constraints -

    NOT NULL -
        Values in a column cannot be Null
        example -
            Add Constraint -
                ALTER table employees modify column emp_name varchar(30) not null;

            To Remove Constraint -
                 ALTER table employees modify column emp_name varchar(30) null;

    UNIQUE -
        Values in a column or a group of columns must be unique i.e distinct from one other
        example -
            Add Constraint -
                ALTER table employees modify column emp_name varchar(30) not null unique;

            To Remove Constraint -
                ALTER TABLE TABLE_NAME DROP INDEX INDEX_NAME

        * MySQL allows multiple NULL values in a UNIQUE column 
        * Mysql automatically creates index when unique constraint is used on that column
        * SHOW COLUMNS from employees;
        * SHOW INDEXES from employees;

    PRIMARY KEY -
        Primary key is used to identify each record in a table uniquely
        It cannot have NULL or Duplicate values
        One table can have only ONE PRIMARY KEY but it can be composed of multiple columns known as COMPOSITE KEY
        *By Default MYSQL creates PRIMARY INDEX whenever a Primary key is created

        example -
            Add Constraint -
                CREATE TABLE Employees (
                    emp_name varchar(30) NOT NULL,
                    emp_id int auto_increment
                    PRIMARY KEY (emp_id)
                    PRIMARY KEY (emp_id,emp_name)  // COMPOSITE PRIMARY KEY
                )
            To Remove -
                ALTER TABLE Employees Drop Index emp_id;

    FOREIGN KEY -
        Foreign  key is a field or column in a table which refers to primary key of another table
        It is used to create relation between one or more than one table
        
        example -
            Add Constraint -
                CREATE TABLE Employees (
                        emp_name varchar(30) NOT NULL,
                        emp_id int auto_increment,
                        dept_id int,
                        PRIMARY KEY (emp_id)
                        FOREIGN KEY (dept_id) refences departments(dept_id)
                    )

                ALTER TABLE child_table
                ADD FOREIGN KEY (child_column)
                REFERENCES parent_table (parent_column);
            To Remove -
                ALTER TABLE employees drop foreign key CONSTRAINT_NAME;

        * To check all the Foreign keys use -   
                SHOW CREATE TABLE TABLE_NAME;

    COMPOSITE KEY -
        One table can have only ONE PRIMARY KEY but it can be composed of multiple columns known as COMPOSITE KEY
        It is used to uniquely identify a table when single column is not unique

        example -
            CREATE TABLE Employees (
                    emp_name varchar(30) NOT NULL,
                    emp_id int auto_increment
                    PRIMARY KEY (emp_id,emp_name)  // COMPOSITE PRIMARY KEY
                )

    DEFAULT KEY -
        Default key is used to specify the default value of the column when no value is explicitly provided

        example -
            Add Constraint -
                Create Table Employees (
                    emp_name varchar(50) DEFAULT "ABC",
                    emp_id int DEFAULT 100
                )

            To Remove -
                Alter table employees add column salary int default 1000;

11. Joins -

        Joins are used to combine data from multiple tables based on related columns using PRIMARY & FOREIGN key

        There are 5 types of joins -

            Inner join - Returns matching records from both tables

            Left join - Returns all records from LEFT TABLE and matching records from RIGHT TABLE

            Right join - Returns all records from RIGHT TABLE and matching records from LEFT TABLE

            Full outer join - Returns all records from both table, not directly supported in MySQL but can 
            be achieved using LEFT JOIN UNION RIGHT JOIN

            Cross join - Returns the Cartesian product of both tables (every row from Table A joins with
             every row from Table B) i.e ( M * N )

            Self Join - Table is joined with itself 

            example -

                SELECT E.emp_id,E.emp_name, D.department_name from employees as E
                LEFT JOIN departments as D ON D.dept_id=E.dept_id;

12. Functions -

    DATE(" ") - extracts Date from a given DATETIME or TIMESTAMP NOT A String

    RAND() - Generates random number between 0 and 1

    FLOOR() & CEIL() - Rounds a number down and up to nearest integer

    ROUND() - Rounds of to given decimal places , by default rounds of to nearest integer
        ROUND(4.567,2) -- 4.57
        ROUND(4.567) -- 5

    UPPER() & LOWER() - Converts given string to upper and lower case respectively

    LTRIM() & RTRIM() - Removes leading and trailing spaces from a given string respectively

    ISNULL() - Checks if a value is NULL, returning 1 if NULL and 0 otherwise.
        SELECT ISNULL(NULL); -- 1
        SELECT ISNULL(10); -- 0

    IFNULL() - Returns a default value if the given value is NULL.
        SELECT IFNULL(NULL, 'Default Value'); -- Output: 'Default Value'
        SELECT IFNULL(10, 20); -- Output: 10 (since 10 is not NULL)

    IF(condition, value_if_true, value_if_false)   

    CASE
        WHEN condition1 THEN result1
        WHEN condition2 THEN result2
        ...
        ELSE default_result
        END as COLUMN_NAME

        example -
            
            select
                o.customer_name ,
                o.order_amount ,
                o.order_date,
                if(o.order_amount>800,'Big Order','Small Order') as order_value,
                case
                    when o.order_date >= NOW()-INTERVAL 1 DAY THEN 'TODAY'
                    WHEN o.order_date >= NOW()- INTERVAL 7 DAY THEN 'THIS WEEK'
                    WHEN o.order_date >= NOW()- INTERVAL 1 MONTH THEN 'THIS MONTH'
                    else 'Older'
                end as order_age
            from
                orders o;

13. Views -

        Views are virtual table created based on the result of a SELECT query.

        It can be used to restrict user from accessing specific columns

        Complex queries can be stored as views and can be reused
        
        * Some Views allow INSERT, UPDATE & DELETE if 
            created using single table
            It does not contains DISTINCT, GROUP BY, JOINS, AGGREGATE Functions 

        examples -

            select * from employees;
            select * from employees where emp_salary is not null and dept_id in (1,2);
            
            CREATE VIEW ValidSalaryUsers AS select * from employees where emp_salary is not null and dept_id in (1,2);

            select * from validsalaryusers;
            update validsalaryusers set emp_salary=1999 ;

14. Indexes -

    * It is a data structure used for data retrieval

    * Indexes are created for Query optimization

    * Using indexes MySQL locate the relevant data without fully scanning the whole table

    * Types of Indexes -    

        Primary key index: Unique and not null.

        Unique index: Ensures unique values.

        Regular index: Speeds up searches.

        Full-text index: For text searching.

        Spatial index: For geospatial data.

    CREATE INDEX INDEX_NAME ON TABLE TABLE_NAME (COLUMN_NAME)

    SHOW INDEXES FROM TABLE_NAME

    DROP INDEX INDEX_NAME

    Clustered Vs Non-Clustered Indexes ->

        A Clustered index determines the Physical order of data rows in a table i.e
        It sorts the data in a table as per clustered index and MODIFIES the original table (Asc order)
        * Only one index is allowed per table , generally Primary key is used as Clustered index

        Non-Clustered index -
        It doesnot determines the Physical order of data rows in a table i.e
        It sorts the data in ASC order but does not modifies the original table
        * It can have multiple non clustered indexes

15. Security Vulnerabilities -

    SQL Injection - 
        Happens when user input is not properly sanitized and allows malicious queries 
        to be poerformed
            SELECT * FROM users WHERE username = 'admin' AND password = '' OR '1'='1';
        Above condition always evaluates to TRUE

    Weak Authentication
    Exposed Port 3306
    Do not grant All previleges to a user 
    Use updated MySQL versions
    Hide details error messages in Production

16. All Information -
    
    INFORMATION_SCHEMA

    * View All Tables details in Database-

        SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'sqllearning'; // Database Name
    
    * View All Indexes details from a Table -

        SELECT * FROM INFORMATION_SCHEMA.STATISTICS WHERE TABLE_SCHEMA = 'DataBase_Name'
        AND TABLE_NAME ='employees'; // Table Name

17. KeyPoints -

    * In Linux MYSQL is CASE SENSITIVE
    
    * Extract Month,Year,Day -

        MONTH(2018-01-31) -> 01
        YEAR(2018-01-31) -> 2018
        DAY(2018-01-31) -> 31
    
    * Date Format -

        Date_Format(date," %Y-%m")

    * Date Subtract -

        The DATE_SUB() function in MySQL is used to subtract a specific time interval from a given date.

        DATE_SUB(date, INTERVAL value unit)
        date → The starting date.
        INTERVAL value unit → The amount of time to subtract.
        value → The numeric value to subtract.
        unit → The time unit (e.g., DAY, MONTH, YEAR, etc.)

        example - SELECT DATE_SUB('2024-03-28', INTERVAL 10 DAY) AS new_date;

    * DATEDIFF(Date1,Date2) -  

        Used to calculate difference between two dates , It returns no. days between two dates

    * Cannot use COUNT(*) inside WHERE -

        select * from Emp where count(*)>2 -- Invalid query

        select * from Emp where (select count(*) from Emp)>2 -- Correct
    
    * LEAD() & LAG() -

        Used to get next and prev values
        example -   
            select LEAD(num) OVER(order by id) from Employees
            select LAG(num) OVER(order by id) from Employees
    
    * CTE (Common Table Expression) -

        With TableName as (select * from EmployeesTable) -- creates a table which can be used to filter data 

    * **OVER - 

        It is an window function 
        It is used to perform operations on a set of Rows which are related to the current row without
        collapsing them into a single row like Group by

        SELECT column1, column2, 
            AGGREGATE_FUNCTION() OVER ([PARTITION BY col] [ORDER BY col])
            FROM table_name;
        example -

            SELECT employee, amount,
            SUM(amount) OVER (ORDER BY id) AS running_total
            FROM sales;

            SELECT employee, department, amount,
            SUM(amount) OVER (PARTITION BY department) AS dept_total
            FROM sales;

    * GROUP_CONCAT( COLUMN_NAME order by COLUMN_NAME SEPARATOR ',') as newName -

        GROUP_CONCAT is used to concat two columns based on a separator when grouping columns
        example - 
        select sell_date,
        count(distinct product ) as num_sold,
        GROUP_CONCAT(distinct product order by product SEPARATOR ',') as products
        from Activities
        group by sell_date
        order by sell_date

18. Backup of Database -

    1. Create a Database Backup using mysqldump:
        To back up all databases:

        mysqldump -uroot -p --all-databases > database_backup.sql
        
        To back up a specific database:

        mysqldump -uroot -p your_database_name > database_backup.sql
        
    2. Copy the Backup File into the MySQL Docker Container:

        Assuming your MySQL container name is mysqlC:

        docker cp database_backup.sql mysqlC:/database_backup.sql

    3. Restore the Backup Inside the MySQL Container:

        Access the MySQL container:

        docker exec -it mysqlC bash
        Then restore the backup:

        mysql -uroot -p < /database_backup.sql

19. Window Functions -

    * Windows functions performs calculations on group of rows related with current row w/o collapsing 
      them into single row like group by

    * <function_name>() OVER (
        [PARTITION BY ...]
        [ORDER BY ...]
        [ROWS BETWEEN ...]
        )

    OVER()	Declares a window to apply the function
    PARTITION BY	Divides rows into groups (like GROUP BY)
    ORDER BY	Orders rows within each partition
    ROWS BETWEEN	Defines a frame of rows to consider (previous, current, following rows)

20. Storage Engines in MySQL -

    InnoDB - 

        * It is the DEFAULT engine of MySQL
        * It supports ACID transactions, foreign - keys , crash recovery and is highly reliable for OLTP
          (Online Transaction Protocols) workloads

    MyISAM (My Indexed Sequential Access Method) -

        * It is Older engine
        * Faster reads but no support for ACID transactions and foreign keys
    
    Memory -

        It stores data is RAM and data is lost upon restart
        It is fast and is used to store temporary data
    
    CSV -

        It stores data is CSV files, rarely used

    * We can define engine while creating table 
         Create table Employees ( emp_id int not null) ENGINE=InnoDB;

21. ACID Properties -

        ACID stands for:

            Atomicity: Transactions are all or nothing.

            Consistency: Data remains consistent after transactions.

            Isolation: Transactions don’t interfere with each other.

            Durability: Once committed, changes persist even after crashes.

22. Normalization - 

    * Normalization is a systematic approach to organize data within a database to reduce redundancy

    * The process involves breaking down large tables into smaller, well-structured ones and defining 
      relationships between them

    * First Normal Form (1NF): Eliminating Duplicate Records

    * Second Normal Form (2NF): 1NF +  Eliminating Partial Dependency

    * Third Normal Form (3NF): 2NF +  Eliminating Transitive Dependency

23. Optimize Slow Queries -

    * Use EXPLAIN to analyze query plans.

    * Add proper indexes.

    * Avoid SELECT *; select only needed columns.

    * Rewrite subqueries as joins (or vice versa).

    * Use LIMIT for pagination.

********************************************************************************************************
* PRACTICE QUESTIONS -


    ✅ 1. Find the 2nd highest salary
        SELECT MAX(salary) 
        FROM employees 
        WHERE salary < (SELECT MAX(salary) FROM employees);

    ✅ 2. Find the Nth highest salary
        SELECT salary 
        FROM employees 
        ORDER BY salary DESC 
        LIMIT 1 OFFSET (n - 1);

    ✅ 3. Find duplicate records by name
        SELECT name 
        FROM employees 
        GROUP BY name 
        HAVING COUNT(name) > 1;

    ✅ 4. Find employees who earn more than their manager
        SELECT e2.emp_name 
        FROM emp e1
        INNER JOIN emp e2 ON e1.id = e2.manager_id
        WHERE e2.salary > e1.salary;

    ✅ 5. Find departments with more than 5 employees
        SELECT department_id, COUNT(*) 
        FROM emp 
        GROUP BY department_id 
        HAVING COUNT(*) > 5;

    ✅ 6. Find employees who joined in the last 6 months
        SELECT name 
        FROM emp 
        WHERE join_date > '2024-10-04';

    ✅ 7. Get the highest salary from each department
        SELECT MAX(salary), department_id 
        FROM emp 
        GROUP BY department_id;

    ✅ 8. Find employees who don’t have any manager
        SELECT name 
        FROM emp 
        WHERE manager_id IS NULL;

    ✅ 9. Find department name and number of employees
        SELECT d.department_name, COUNT(*) 
        FROM emp e1
        INNER JOIN departments d ON e1.department_id = d.department_id
        GROUP BY d.department_id;

    ✅ 10. Find 3rd highest salary using CTE
        WITH thirdhighest AS (
        SELECT salary 
        FROM emp 
        ORDER BY salary DESC 
        LIMIT 1 OFFSET 2
        )
        SELECT salary 
        FROM thirdhighest;

    ✅ 11. Find employees with highest salary in each department using CTE
        WITH ranked_emp AS (
        SELECT name, salary, department_id,
                RANK() OVER (PARTITION BY department_id ORDER BY salary DESC) AS rnk
        FROM emp
        )
        SELECT name, salary, department_id 
        FROM ranked_emp 
        WHERE rnk = 1;

    ✅ 12. Find all employees and their department names
        SELECT name, department_id, salary, d.department_name 
        FROM emp e1 
        INNER JOIN department d ON e1.department_id = d.department_id;

    ✅ 13. Retrieve employees whose salary is above average
        SELECT name, salary 
        FROM emp 
        WHERE salary > (SELECT AVG(salary) FROM emp);

    ✅ 14. Find employees with same salary using self-join
        SELECT e1.name, e2.name, e1.salary 
        FROM emp e1 
        INNER JOIN emp e2 
        ON e1.salary = e2.salary AND e1.id != e2.id;

        Optional Deduplicated Version:
        SELECT e1.name, e2.name, e1.salary
        FROM emp e1
        INNER JOIN emp e2 ON e1.salary = e2.salary AND e1.id < e2.id;

    ✅ 15. Get cumulative salary per department using window functions
        SELECT name, department_id, salary,
            SUM(salary) OVER (PARTITION BY department_id ORDER BY salary) AS totalSalary
        FROM emp;

REVISION -

    ✅ DATA TYPES - Numeric, String , Date & Time, Boolean, JSON & Other types

    ✅ DDL - Create , Alter, Drop ,Truncate
    ✅ DML - Update , Delete , Insert
    ✅ DQL - Select
    ✅ DCL - Grant, Revoke
    ✅ TCL - Transaction, Rollback, Commit

    ✅ Data Contraints - NOT NULL, UNIQUE, PRIMARY KEY, FOREIGN KEY, COMPOSITE KEY, DEFAULT KEY 

    ✅ Clauses - WHERE, HAVING, ORDER BY, GROUP BY, LIMIT, OFFSET

    ✅ Aggregate Functions - SUM, AVG, COUNT,MAX, MIN, COALESCE, REPLACE, LIKE , REGEXP, ROUND, FLOOR, CEIL, UPPER,
    ✅ LOWER, RAND, ISNULL, IFNULL

    ✅ JOINS - LEFT, RIGHT, INNER, OUTER(LEFT UNION RIGHT), CROSS

    ✅ WINDOW FUNCTIONS

    ✅ IF ELSE , SWITCH CASE

    ✅ COMMON TABLE EXPRESSIONS

    ✅ INDEXES

    ✅ VIEWS

    ✅ SQL Vulnerabilities