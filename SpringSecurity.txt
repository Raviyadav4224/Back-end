1. What is Spring Security -

    * It is a powerfull Authentication and Access Control framework which provides 
        1. Authentication - Who are you 
        2. Authorization - What are you allowed to do (Grants access based on Roles)
    
    * Authentication happens first and then Authorization

    * It is based on Chain of Filters, where each request goes through a Security Filter Chain
      Key filters - UsernamePasswordAuthenticationFilter, BearerAuthenticationFilter etc

    * DelegatingFilterProxy acts as bridge between Spring's Application Context and Servlet Filter API,
      auto registered in Springboot or in Web.xml file
    
    * In Spring Boot -

        WebApplicationInitializer and web.xml-style manual filter registration is not required.

        Spring Boot auto-registers the filters by using DelegatingFilterProxy under the hood.

        You just define a SecurityFilterChain bean, and Boot handles the rest.

2. SecurityFilterChain vs AuthenticationManager vs UserDetailsService -

    SecurityFilterChain - 

        * Chain of Filters which intercepts Http requests i.e controls access
        
        * Decides what requests are allowed or restricted

        * Configures:
            Public vs secured endpoints
            Login/logout behavior
            Session, CSRF, CORS, etc.

        * example - 

            @Bean
            SecurityFilterChain filterChain(HttpSecurity http) throws Exception {

                http
                    .csrf(csrf->csrf.disable()) // Disables CSRF
                    .authorizeHttpRequests(
                        auth -> auth.requestMatchers("/api/v1/public/**").permitAll()
                                .anyRequest().authenticated())
                                .formLogin(withDefaults());
                return http.build();
            }

    AuthenticationManager - 
    
        * Authenticates whether the username and passwords are correct or not

        * example -

            @Bean
            AuthenticationManager authManager(HttpSecurity http) throws Exception {
                AuthenticationManagerBuilder auth = http.getSharedObject(AuthenticationManagerBuilder.class);
                auth.userDetailsService(myuserdetailsservice)
                    .passwordEncoder(passEncoder());

                return auth.build();
            }

    UserDetailsService -

        * Fetches user details from DB or Hardcoded and converts user entity to Spring-compatible 
          UserDetails Object
          
        * example -

            @Service
            public class CustomUserDetailsService implements UserDetailsService {
                @Override
                public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
                    if ("Ravi".equals(username)) {
                        return new User("Ravi", "{noop}admin123",
                            List.of(new SimpleGrantedAuthority("ROLE_ADMIN")));
                    }
                    throw new UsernameNotFoundException("User not found");
                }
            }

3. Jwts - 

    package - 

        jjwt-api - Core JWT features
        jjwt-impl , jjwt-jackson - For runtime

    To generate -

        Jwts.builder() 
        then -> .subject() , .issuedAt() , .expiration() , .signWith(Key in  Bytes[])

    To parse Jwts -

        Jwts.parse()
        then -> .setSigningKey(), .parseSignedClaims(token), .getPayload()

    JWT Filter -

        To create JWTFilter we need to extend OncePerRequestFilter and implement doFilterInternal method

    STATELESS -

        Using session creation policy as stateless

            No JSESSIONID cookie is created
            No HttpSession is maintained by the server
            Each request must include a valid JWT token 
            Server authenticates each request individually
			http.sessionManagement(session->session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))

    * CORS -  

        For CORS just add 
            http.cors(withDefaults())
        
        For handling allowed origin, headers etc we need to define CorsConfiguration bean which spring
        inject itself
            @Bean
            CorsConfigurationSource corsConfigurationSource() {
                CorsConfiguration config = new CorsConfiguration();
                
                config.setAllowedOrigins(List.of(allowedOrigins)); // Allow all origins (not recommended for prod)
                config.setAllowedMethods(List.of(allowedMethods));
                config.setAllowedHeaders(List.of(allowedHeaders));
                config.setAllowCredentials(allowedCredentials); // when using Cookie or authorization Handler

                UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();

                source.registerCorsConfiguration("/**", config);
                return source;
            }

4. @PreAuthorize, @PostAuthorize, @Secured ( Used at Method level ) -

    @Secured - 

        Used for simple role check
        @Secured("ROLE_ADMIN")
            
    @PreAuthorize -

        Runs before methods and supports expression
        @PreAuthorize("#id == authentication.principal.id")
        @PreAuthorize("hasRole('ADMIN')")

    @PostAuthorize -

        Runs after methods and Can check return values with expressions
        @PostAuthorize("returnObject.owner == authentication.name")

    * @EnableMethodSecurity(securedEnabled = true, prePostEnabled = true)
    
    * Method-level security vs URL-level security -

        URL level security is done using FilterChains
        Method level is done using @PreAuthorize, @PostAuthorize, @Secured

5. OAuth2 for Social Login -

    Basic understanding of OAuth2 flows
    Understanding tokens: Access Token, Refresh Token
    Custom AuthenticationEntryPoint (unauthorized)
    Custom AccessDeniedHandler (forbidden)
    Using Redis for token blacklisting (e.g., JWT logout)

6. Springboot Actuator -    

    * package - spring-boot-starter-actuator

    * It provides Production Ready features to check and monitor spring boot applications

    * It exposes endpoints (like /actuator/health, /actuator/info, /actuator/metrics, etc.) to check 
      the internal state of the application without accessing the code
      
    * management.endpoints.web.exposure.include=* in application.properties exposes all endpoints

    * To secure end points we can do it in securityConfig

    * In production, Prometheus is commonly used with Actuator + Micrometer to collect and monitor metrics 
      from Spring Boot applications
