1. Servlets -

    These are plain Java classes that are used to handle Http Request and Http Response.
    It runs on a server like Tomcat and helps to build dynamic web contents

    ** For a Java class to be servlet it must extend the HttpServlet class

    example -

        public class HelloServlet extends HttpServlet {
        protected void doGet(HttpServletRequest request, HttpServletResponse response) {
            try {
                PrintWriter writer = response.getWriter();
                writer.print("Hello From HelloServlet Java Class");
            } catch (IOException e) {
                e.printStackTrace();
            }
            }
            }

    *To map URL's we can use 
        web.xml configuration 
        @WebServlet('/path') annotation

2. Tomcat -

    It a web server and a SERVLET container
    It is a place where we deploy our web applications
    It takes care of running Servlets and serves JSP 

3. Servlet Web Application -

    Servlets (Java Classes) are used to handle Backend logic
    JSP - Used to deliver HTML dynamically ( HTML + Java )
    Tomcat - Servlet container used to run the web application where this app is deployed

4. JSP ( Java Server Pages ) -

    JSP helps to embed Java class into HTML i.e writing Java inside HTML is done using JSP

    * Behind the scene JSP's are compiled into Servlet class by the server
    * JSP: HTML with bits of Java using <% %>, <%= %> 
        example -
         <h2>Hello, <%= request.getAttribute("name") %> from JSP!</h2>

5. Servlet Life Cycle Methods -

    It works in 3 stages -

        init() - Called once when the Servlet is first loaded

        service() - Called each time when a request is received, service method internally handles 
        doGet, doPost methods

        destroy() - Called once when Servlet is taken out of service

6. HttpSession -

    It is a way top store user specific data on server side between multiple requests

    * Server stores the session data in RAM 
    * Client gets a session id via a cookie JSESSIONID
    * Server validates using JSESSIONID and gives user specific data

7. Request Dispatching -

    It is a mechanism used by Servlets to transfer control from one Servlet to another without Client
    being aware
    * It is used to forward a reuest from one servlet to another
    * It is used to include response from one servlet to another
    * It is also used to implement MVC pattern i.e forwarding to JSP from a server 

    example - 
        request.getRequestDispatcher("Servlet2").forward(request,response) - Forwards request,
        response to another servlet

        request.getRequestDispatcher("header.jsp").include(request, response) - includes resources

8. Maven -

    It is a build tool for Java applications
    
    It is used to manage dependencies, Building and Packaging your application, Running Tests, Deploying Artifacts

    * It is similar to VITE, PARCEL, WEBPACK in Front end 

    * Some common commands used in Maven -

        mvn clean - Deletes the target/ directory where compiled classes and jars go

        mvn compile - Compiles source code in src/main/java

        mvn test - Runs unit tests located in src/test/java

        mvn install - Installs the dependencies

        mvn package - Compiles the code, Run Tests and creates .jar or .war file in the /target folder
                      For spring-boot it creates executable.jar file with embedded Tomcat

        mvn spring-boot:run - Runs the spring-boot application

        mvn package -DskipTests - Builds the application without running unit tests

9. POM ( Project Object Model ) -

    It contains project configuration detials like project info, dependencies, pluggins, build settings etc
    * It is similar to package.json
    * Effective POM - POM + pluggins

10. GAV -

    G - Group Id - Who owns the project - example com.ravi or com.google
    A - Artifact Id - Name of the project example my-app
    V - Version example 1.0.0