1. Hibernate -

    It is an Object Relational Mapping ( ORM ) Framework which simplifies the interaction of Java
    applications with Relational Databases using Java classes and objects

    It supports -

        Mapping of Java classes/objects to relational database tables
        Provides caching support (First Level and Second Level)
        Supports declarative Transaction management
        Hibernate Query Language ( HQL ) which is database independent

2. Limitations of JDBC -

    Manual mapping of SQL queries to objects
    Hardcoded SQL queries 
    No built in support for caching
    Boiler plate code for Transaction management
    Connection pooling manually leads to data leaks

3. JPA vs Hibernate -

    Java Persistence API ( JPA ) -

        It is an specification for accessing ,managing and persisting data between Java classes and 
        databases
        It contains a standard set of interfaces and annotations that defines how ORM should be implemented
        * Hibernate is an implementation of JPA i.e it is made on top of JPA
        * Some popular JPA implementations include EclipseLink, OpenJPA, Hibernate etc

4. Hibernate Architecture -

5. Ways to configure Hibernate properties -

    1. Using hibernate.cfg.xml file -

        <?xml version="1.0" encoding="UTF-8"?>
            <!DOCTYPE hibernate-configuration PUBLIC
                "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
                "http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd">
            <hibernate-configuration>
                <session-factory>
                    <!-- JDBC Database connection settings -->
                    <property name="connection.driver_class">com.mysql.cj.jdbc.Driver</property>
                    <property name="connection.url">jdbc:mysql://localhost:3306/mydatabase</property>
                    <property name="connection.username">root</property>
                    <property name="connection.password">password</property>

                    <!-- SQL Dialect -->
                    <property name="dialect">org.hibernate.dialect.MySQLDialect</property>

                    <!-- Other settings -->
                    <property name="show_sql">true</property>
                    <property name="hbm2ddl.auto">update</property>

                    <!-- Mapping entity -->
                    <mapping class="com.example.User"/>
                </session-factory>
            </hibernate-configuration>
    
        * Hibernate.cfg.xml is automatically loaded from the classpath when you create a Configuration
        * Explicitly we can mention the file path as well
            Configuration configuration = new Configuration().configure("myhibernate.cfg.xml");

    2. Using hibernate.properties file -

        # JDBC database connection settings
        hibernate.connection.driver_class=com.mysql.cj.jdbc.Driver
        hibernate.connection.url=jdbc:mysql://localhost:3306/mydatabase
        hibernate.connection.username=root
        hibernate.connection.password=password

        # SQL dialect for the underlying database
        hibernate.dialect=org.hibernate.dialect.MySQLDialect

        # Display executed SQL to the console (for debugging purposes)
        hibernate.show_sql=true

        # Automatically update the schema (options: none, validate, update, create, create-drop)
        hibernate.hbm2ddl.auto=update

        # Caching settings (if caching is enabled)
        hibernate.cache.use_second_level_cache=true
        hibernate.cache.region.factory_class=org.hibernate.cache.ehcache.EhCacheRegionFactory

        * Configuration object automatically loads the hibernate.properties file placed in classpath
            example - 
                Create a Configuration instance. This automatically loads the hibernate.properties file if it's in the classpath.
                Configuration configuration = new Configuration();

    3. Using Configuration class -

        Configuration configuration = new Configuration();

        configuration.setProperty("hibernate.connection.driver_class", "com.mysql.cj.jdbc.Driver");
        configuration.setProperty("hibernate.connection.url", "jdbc:mysql://localhost:3306/mydatabase");
        configuration.setProperty("hibernate.connection.username", "root");
        configuration.setProperty("hibernate.connection.password", "password");
        configuration.setProperty("hibernate.dialect", "org.hibernate.dialect.MySQLDialect");
        configuration.addAnnotatedClass(User.class);

        SessionFactory sessionFactory = configuration.buildSessionFactory();

    * In spring/springboot application.properties file is used to do the configuration

6. Steps to connect to Hibernate -

        1. Load Configuration -

            Configuration config = new Configuration().configure();
            * For adding path manually - .configure("path/to/hibernate.cfg.xml")
            * For loading hibernate.properties manually -
                Properties props = new Properties();
                props.load(new FileInputStream("src/main/resources/config/hibernate.properties"));
			    sessionFactory = new Configuration().addProperties(props).addAnnotatedClass(User.class)
					.buildSessionFactory();

        2. Build SessionFactory -

            SessionFactory sessionFactory = config.buildSessionFactory();

        3. Open Session -
        
            Session session = sessionFactory.openSession();

        4. Begin Transaction -

            Transaction tx = session.beginTransaction();

        5. Perform DB Operation -

            User user = new User("ravi", "ravi@gmail.com");
            session.save(user);

        6. Commit Transaction -

            tx.commit();

        7. Rollback if Exception Occurs -

            if (tx != null) tx.rollback();

        8. Close Session & SessionFactory-

            session.close();
            sessionFactory.close();

7. CRUD Operation -

    // CREATE
        User user = new User("Ravi", "ravi@example.com");
        Session session = HibernateUtil.getSessionFactory().openSession();
        Transaction tx = session.beginTransaction();
        session.save(user);
        tx.commit();
        session.close();

    // READ
        session = HibernateUtil.getSessionFactory().openSession();
        User retrieved = session.get(User.class, 1);
        System.out.println("User: " + retrieved.getName());
        session.close();

    // UPDATE
        session = HibernateUtil.getSessionFactory().openSession();
        tx = session.beginTransaction();
        User updateUser = session.get(User.class, 1);
        updateUser.setEmail("ravi_new@example.com");
        session.update(updateUser);
        tx.commit();
        session.close();

    // DELETE
        session = HibernateUtil.getSessionFactory().openSession();
        tx = session.beginTransaction();
        User deleteUser = session.get(User.class, 1);
        session.delete(deleteUser);
        tx.commit();
        session.close();

8. Selective and Transient -

9. Lazy vs Eager loading -

10. Level 1 & Level 2 caching -

11. Association Mapping -

12. HQL -

13. CRUD using HQL -